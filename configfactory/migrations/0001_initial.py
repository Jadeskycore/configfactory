# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-16 07:44
from __future__ import unicode_literals

import configfactory.managers
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('api_token', models.CharField(blank=True, max_length=48, null=True, unique=True, verbose_name='API token')),
                ('is_apiuser', models.BooleanField(default=False, help_text='Designates whether the user can call api.', verbose_name='API user status')),
                ('api_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to=settings.AUTH_USER_MODEL, verbose_name='API user')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
            },
            managers=[
                ('objects', configfactory.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='name')),
                ('alias', models.SlugField(unique=True, verbose_name='alias')),
                ('is_global', models.BooleanField(default=False, help_text='Does not require environment settings.', verbose_name='is global?')),
                ('use_schema', models.BooleanField(default=False, help_text='Use JSON schema for settings validation.', verbose_name='use JSON schema?')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='create datetime')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='update datetime')),
            ],
            options={
                'verbose_name_plural': 'components',
                'verbose_name': 'component',
                'permissions': (('view_component', 'Can view component'),),
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('settings_content', models.TextField(default='{}', serialize=False)),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configs', to='configfactory.Component')),
            ],
            options={
                'permissions': (('view_config', 'Can view config'),),
                'ordering': ('component__alias',),
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='name')),
                ('alias', models.SlugField(unique=True, verbose_name='alias')),
                ('order', models.SmallIntegerField(default=0, verbose_name='order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='create datetime')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='update datetime')),
            ],
            options={
                'verbose_name_plural': 'environments',
                'verbose_name': 'environment',
                'permissions': (('view_environment', 'Can view environment'),),
                'ordering': ('order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='GlobalSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indent', models.SmallIntegerField(help_text='JSON indent level.')),
                ('cleansed_hidden', models.TextField(help_text='Key names that will be substituted by `cleansed_substitute` value.')),
                ('cleansed_substitute', models.CharField(help_text='Cleansed substitute value.', max_length=32)),
                ('inject_validation', models.BooleanField(default=True, help_text='Validate injection parameters.')),
            ],
        ),
        migrations.CreateModel(
            name='JSONSchema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='{}', serialize=False)),
                ('component', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='json_schema', to='configfactory.Component')),
            ],
            options={
                'verbose_name_plural': 'JSON schemas',
                'verbose_name': 'JSON schema',
                'permissions': (('view_json_schema', 'Can view JSON schema'),),
            },
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.TextField(blank=True, null=True, verbose_name='object id')),
                ('object_repr', models.CharField(max_length=200, verbose_name='object repr')),
                ('action', models.CharField(choices=[('create', 'create'), ('update', 'update'), ('delete', 'delete')], db_index=True, max_length=64, verbose_name='action')),
                ('action_time', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='action time')),
                ('prev_data_content', models.TextField(blank=True, verbose_name='previous data content')),
                ('next_data_content', models.TextField(blank=True, verbose_name='next data content')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.ContentType', verbose_name='content type')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ('-action_time',),
            },
        ),
        migrations.CreateModel(
            name='UserComponentStar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='configfactory.Component')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'user component stars',
                'verbose_name': 'user component star',
            },
        ),
        migrations.AddField(
            model_name='config',
            name='environment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='configs', to='configfactory.Environment'),
        ),
        migrations.AlterUniqueTogether(
            name='usercomponentstar',
            unique_together=set([('user', 'component')]),
        ),
        migrations.AlterUniqueTogether(
            name='config',
            unique_together=set([('environment', 'component')]),
        ),
    ]
